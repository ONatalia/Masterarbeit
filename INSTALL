_____________________________________________________________
  _                                         _           _   
 (_)_ __  _ __  _ __ ___    _ __  _ __ ___ (_) ___  ___| |_ 
 | | '_ \| '_ \| '__/ _ \  | '_ \| '__/ _ \| |/ _ \/ __| __|
 | | | | | |_) | | | (_) | | |_) | | | (_) | |  __/ (__| |_ 
 |_|_| |_| .__/|_|  \___/  | .__/|_|  \___// |\___|\___|\__|
         |_|               |_|           |__/               
_____________________________________________________________

Installation instructions for the JAVA programs in the inpro 
project (thus mainly the ASR and closely connected modules).

For the moment there are no explicit build instructions, as we 
use Eclipse with Subclipse installed as our build environment.
An ant build file (exported from eclipse) is provided in the
distribution, but your milleage with this may vary. 

Dependencies:
=============

1. Sphinx4:

get it at http://sourceforge.net/project/showfiles.php?group_id=1904&package_id=117949

There are a few modifications between stock sphinx and the one we use.
If you run into troubles, please look on our webpage to see whether you
should use "our" sphinx4.jar . 

All you need is the library sphinx4.jar that you want to add 
to your CLASSPATH.

1a. German Acoustic Model:

get it via ssh at helios:/home/timo/KCoRS_DE_8gau_13dCep_16k_40mel_130Hz_6800Hz.jar
and at it to your CLASSPATH. There may be more current models around and you may
also want to look on www.voxforge.org for acoustic models

KCoRS_DE_8gau_13dCep_16k_40mel_130Hz_6800Hz.jar
Cocolab_DE_8gau_13dCep_16k_40mel_130Hz_6800Hz.jar

Acoustic models for German may also be available from Voxforge. 
See http://www.voxforge.org/home/downloads/ for details.

copy the models you want/need and put them in /opt/java/

2. OAA (2.3.2):

get it at http://www.ai.sri.com/oaa/distribution/v2.3/2.3.2/

You will definitely need the facilitator (in runtime/
/facilitator/) and likely the debugger (in runtime/debug/ and
runtime/debug_c/) to run the modules that require to talk
via the OAA.

Also, add the libraries in lib/jar to your CLASSPATH.
( oaa2.jar and antlr-oaa.jar are the only needed ones from the 
OAA-project. The other needed libraries may also be 
installable via your package manager).

3. Java Media Framework (2.1.1):

JMF is no longer required for using InproTK

4. weka (3.5.x)

get it at http://www.cs.waikato.ac.nz/ml/weka/index_downloading.html

Add weka.jar to your CLASSPATH.

5. drej (1.2) 

get it at http://www.gregdennis.com/drej/

and add it to your CLASSPATH. It also requires vecmath.jar,
available from https://java3d.dev.java.net/binary-builds.html,
which must be added to your CLASSPATH as well.

6. maryclient

get it from http://mary.dfki.de/

Currently, our code depends on both Mary 3.6's and Mary 4.0's maryclient.jar,
as we are aiming to support both as TTS server and as the client/server
protocol has changed between 3.6 and 4.0. However, you can change 
org.cocolab.inpro.audio.MaryAdapter to get rid of the dependency on one or
the other.

7. some more libraries (dom4j, junit, log4j, vecmath, emory-backports, ...)

These should be installable through your system's package manager 
as they are fairly standard libraries.

Some more libraries might be in the res/ or lib/ folders. 
Adding them to your build path might (or might not) help.
